//
// Created by Tasbauova Dayana on 2.10.2021.
//

//------------------------------------------------------------------------------
// container.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Инициализация контейнера
void Init(container &c) {
    c.len = 0;
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Clear(container &c) {
    for (int i = 0; i < c.len; i++) {
        delete c.cont[i];
    }
    c.len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
// я решил игнорировать невалидные объекты
void In(container &c, std::ifstream &stream) {
    while (!stream.eof() && stream.good()) {
        if ((c.cont[c.len] = In(stream)) != nullptr) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
// InRnd по идее никогда не возвращает nullptr
void InRandom(container &c, int size) {
    while (c.len < size) {
        if ((c.cont[c.len] = InRandom()) != nullptr) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Out(container &c, std::ofstream &stream) {
    stream << "Container contains " << c.len << " elements." << std::endl;
    for (int i = 0; i < c.len; i++) {
        stream << i << ": ";
        Out(*(c.cont[i]), stream);
    }
}


//------------------------------------------------------------------------------
// Сортировка прямым выбором минимума. Сортирует контейнер по возрастанию
void StraightSelectionSort(container &c) {
    for (int i = 0; i < c.len; ++i) {
        int min_index = i; // первые i мы уже отсортировали
        for (int j = i; j < c.len; ++j) {
            if (Quotient(*(c.cont[j])) < Quotient(*(c.cont[min_index]))) {
                min_index = j;
            }
        }
        // мы нашли индекс минимального не отсортированного элемента
        std::swap(c.cont[min_index], c.cont[i]);
    }
}